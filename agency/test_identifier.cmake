# Copyright (c) 2023, Roman Koch, koch.roman@gmail.com
# SPDX-License-Identifier: MIT

function(generate_test_identifier_header target TEST_ENTRIES)
    # Log message indicating the start of header generation
    message(STATUS "Generate test group and identifier include file.")

    # Set the output header file path
    set(OUTPUT_HEADER "${PROJECT_SOURCE_DIR}/bin/unit_identifier.hpp")

    # Set the output text file path
    set(OUTPUT_TEXT "${PROJECT_SOURCE_DIR}/bin/unit_identifier.txt")

    # Check if the specified target exists
    if(NOT TARGET ${target})
        message(FATAL_ERROR "Target ${target} does not exist.")
    endif()

    target_include_directories(${target} PRIVATE ${REVISION_FILEPATH})

    # Define the header guard name
    set(HEADER_GUARD_NAME "AUTO_GENERATED_TEST_GROUP_AND_IDENTIFIER")

    # Write the initial content to the text file
    file(WRITE ${OUTPUT_TEXT} "Koch, Roman (koch.roman@googlemail.com\n")
    file(APPEND ${OUTPUT_TEXT} "Copyright (c) 2024, Roman Koch, koch.roman@gmail.com\n")
    file(APPEND ${OUTPUT_TEXT} "SPDX-License-Identifier: MIT\n\n")
    file(APPEND ${OUTPUT_TEXT} "Attention: this file was generated by CMake.\n")
    file(APPEND ${OUTPUT_TEXT} "Do not commit.\n\n")
 
    # Write the initial content to the header file
    file(WRITE ${OUTPUT_HEADER} "// Koch, Roman (koch.roman@googlemail.com\n")
    file(APPEND ${OUTPUT_HEADER} "// Copyright (c) 2024, Roman Koch, koch.roman@gmail.com\n")
    file(APPEND ${OUTPUT_HEADER} "// SPDX-License-Identifier: MIT\n\n")

    # Write a warning message that the file is auto-generated
    file(APPEND ${OUTPUT_HEADER} "// Attention: this file was generated by CMake.\n")
    file(APPEND ${OUTPUT_HEADER} "// Do not commit.\n\n")

    # Write the header guard
    file(APPEND ${OUTPUT_HEADER} "#ifndef __${HEADER_GUARD_NAME}_HPP__\n")
    file(APPEND ${OUTPUT_HEADER} "#define __${HEADER_GUARD_NAME}_HPP__\n\n")

    # Include the necessary header file
    file(APPEND ${OUTPUT_HEADER} "#include <stdint.h>\n\n")

    # Start the test namespace and enum definition for GROUP
    file(APPEND ${OUTPUT_HEADER} "namespace test {\n")
    file(APPEND ${OUTPUT_HEADER} "    enum GROUP : uint16_t {\n")

    # List to keep track of unique groups
    set(UNIQUE_GROUPS)

    # Iterate over each test entry
    foreach(TEST_ENTRY ${TEST_ENTRIES})
        # Split the test entry into its components
        string(REPLACE "/" ";" ENTRY_LIST ${TEST_ENTRY})

        list(GET ENTRY_LIST 0 GROUP_NAME)
        list(GET ENTRY_LIST 1 TEST_NAME)
        list(GET ENTRY_LIST 2 GROUP_HASH)
        list(GET ENTRY_LIST 3 TEST_ID)
        list(GET ENTRY_LIST 4 GROUP_ID)

        # Add the group to the enum if it's not already in the list of unique groups
        if(NOT GROUP_NAME IN_LIST UNIQUE_GROUPS)
            list(APPEND UNIQUE_GROUPS ${GROUP_NAME})
            file(APPEND ${OUTPUT_HEADER} "        ${GROUP_NAME} = ${GROUP_ID},\n")
        endif()
    endforeach()

    # Close the GROUP enum definition
    file(APPEND ${OUTPUT_HEADER} "    };\n")

    # Iterate over each unique group to create a namespace for it
    foreach(STORED_GROUP_NAME ${UNIQUE_GROUPS})
        # Convert the group name to lowercase for the namespace
        string(TOLOWER ${STORED_GROUP_NAME} NAMESPACE)
        file(APPEND ${OUTPUT_HEADER} "    namespace ${NAMESPACE} {  /* ${STORED_GROUP_NAME} */\n")
        file(APPEND ${OUTPUT_HEADER} "        enum IDENTIFIER : uint16_t {\n")

        # Iterate over each test entry again to add test identifiers to the corresponding namespace
        foreach(TEST_ENTRY ${TEST_ENTRIES})
            string(REPLACE "/" ";" ENTRY_LIST ${TEST_ENTRY})

            list(GET ENTRY_LIST 0 GROUP_NAME)
            list(GET ENTRY_LIST 1 TEST_NAME)
            list(GET ENTRY_LIST 2 GROUP_HASH)
            list(GET ENTRY_LIST 3 TEST_ID)
            list(GET ENTRY_LIST 4 GROUP_ID)

            # Add the test name to the IDENTIFIER enum if it belongs to the current group
            if(GROUP_NAME STREQUAL STORED_GROUP_NAME)
                file(APPEND ${OUTPUT_HEADER} "            ${TEST_NAME} = ${TEST_ID},\n")

                file(APPEND ${OUTPUT_TEXT} "${GROUP_ID} ${TEST_ID}\t${GROUP_NAME} ${TEST_NAME}\n" )
            endif()
        endforeach()

        # Close the IDENTIFIER enum and namespace
        file(APPEND ${OUTPUT_HEADER} "        };\n")
        file(APPEND ${OUTPUT_HEADER} "    };\n")
    endforeach()

    # Close the test namespace and header guard
    file(APPEND ${OUTPUT_HEADER} "}\n\n")
    file(APPEND ${OUTPUT_HEADER} "#endif // __${HEADER_GUARD_NAME}_HPP__\n")
endfunction()
